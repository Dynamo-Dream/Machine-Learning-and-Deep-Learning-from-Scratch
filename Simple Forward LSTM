import numpy as np

class LSTM:
    def __init__(self, input_size, hidden_size):
        self.input_size = input_size
        self.hidden_size = hidden_size

        # Initialize weights and biases
        self.Wf = np.random.randn(hidden_size, input_size + hidden_size)
        self.Wi = np.random.randn(hidden_size, input_size + hidden_size)
        self.Wc = np.random.randn(hidden_size, input_size + hidden_size)
        self.Wo = np.random.randn(hidden_size, input_size + hidden_size)

        self.bf = np.zeros((hidden_size, 1))
        self.bi = np.zeros((hidden_size, 1))
        self.bc = np.zeros((hidden_size, 1))
        self.bo = np.zeros((hidden_size, 1))

    def sigmoid(self, x):
        return 1 / (1 + np.exp(-x))

    def forward(self, x, initial_hidden_state, initial_cell_state):
        """
        Processes a sequence of inputs and returns all hidden states, final hidden state, and final cell state.
        """
        cell_state = initial_cell_state
        hidden_state = initial_hidden_state
        outputs = []

        for seq in x:
            input_data = np.vstack((hidden_state, seq.reshape(-1, 1)))  # Ensure correct shape
            f_t = self.sigmoid(np.dot(self.Wf, input_data) + self.bf)
            i_t = self.sigmoid(np.dot(self.Wi, input_data) + self.bi)
            c_t = np.tanh(np.dot(self.Wc, input_data) + self.bc)

            # Correct cell state update
            cell_state = f_t * cell_state + i_t * c_t

            o_t = self.sigmoid(np.dot(self.Wo, input_data) + self.bo)
            hidden_state = o_t * np.tanh(cell_state)
            outputs.append(hidden_state)

        outputs = np.array(outputs).squeeze(axis=-1)  # Convert list to NumPy array

        return outputs, hidden_state, cell_state  # Return all hidden states, final hidden state, final cell state
